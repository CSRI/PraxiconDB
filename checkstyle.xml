<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">

    <module name="TreeWalker">
        <property name="cacheFile" value="${checkstyle.cache.file}" />

        <!-- Check parentheses padding -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="^\t+(if|for|while|catch)([^ ])\(" />
            <property name="message" value="Left parentheses should be preceeded by 1 whitespace" />
            <property name="ignoreComments" value="true" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="^\t+(if|for|while) \( .+[^ ]\) \{$" />
            <property name="message" value="Right parentheses should be preceeded by 1 white space" />
            <property name="ignoreComments" value="true" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="^\t+(if|for|while) \([^ $]" />
            <property name="message" value="Left parentheses should be followed by 1 whitespace" />
            <property name="ignoreComments" value="true" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="\)([^ ])\{$" />
            <property name="message" value="Right parentheses should be followed by 1 white space" />
            <property name="ignoreComments" value="true" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="catch \([^\w]" />
            <property name="message" value="'catch' clause does not require white space after left parentheses" />
            <property name="ignoreComments" value="true" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="catch \(.*\s\) \{" />
            <property name="message" value="'catch' clause does not require white space before right parentheses" />
            <property name="ignoreComments" value="true" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="\)\s+;$" />
            <property name="message" value="Unecessary whitespace after parentheses" />
            <property name="ignoreComments" value="true" />
        </module>

       <!-- Checks for imports -->
        <module name="AvoidStarImport" />
        <module name="RedundantImport" />
        <module name="UnusedImports" />

        <!-- Checks for common coding problems -->
        <module name="EqualsHashCode" />
        <module name="IllegalInstantiation" />

        <!-- Miscellaneous other checks. -->
        <module name="ModifierOrder" />
        <module name="GenericWhitespace" />
        <module name="PackageAnnotation" />
        <module name="CovariantEquals" />
        <module name="ModifiedControlVariable" />
        <module name="NeedBraces" />
        <module name="OneStatementPerLine" />
        <module name="EmptyStatement" />
        <module name="DefaultComesLast" />
        <module name="WhitespaceAround" />
        <module name="TypecastParenPad" />
        <module name="RedundantThrows" />
        <module name="HideUtilityClassConstructor"/>
        <module name="MutableException"/>
        <module name="CovariantEquals" />
        <module name="EqualsAvoidNull" />

        <!-- <module name="DeclarationOrder" /> -->
        <module name="RedundantModifier"/>
        <module name="MissingOverride"/>

        <module name="MethodParamPad">
            <property name="option" value="nospace" />
            <property name="allowLineBreaks" value="false" />
        </module>

        <!-- Checks for blocks. You know, those {}'s -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
        </module>
        <module name="RightCurly">
            <property name="option" value="alone" />
        </module>

        <module name="ParenPad">
            <property name="tokens" value="CTOR_CALL, METHOD_CALL, SUPER_CTOR_CALL" />
            <property name="option" value="space" />
        </module>

        <module name="org.hibernate.checkstyle.checks.regexp.DoubleSpaces">
            <property name="ignoreComments" value="true" />
            <property name="ignoreStrings" value="true" />
        </module>

        <!-- WARN, ERROR and INFO Logging severity levels should be used exclusively via the methods which allow i18 -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="log\.((error)|(warn)|(info))\(" />
            <!-- The last sentence of the message is a keyword to trigger exclusion: see ExcludeTestPackages -->
            <property name="message" value="'log.error()', warn() and info() should never be used. [not required for tests]" />
            <property name="ignoreComments" value="true" />
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.(out)|(err)\.print(ln)?\(" />
            <!-- The last sentence of the message is a keyword to trigger exclusion: see ExcludeTestPackages -->
            <property name="message" value="Not allowed to print to System.out: if you're damn sure you want it, disable Checkstyle on this line. [not required for tests]" />
            <property name="ignoreComments" value="true" />
        </module>

        <!-- Slowly migrating away from Hibernate Commons Annotations -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="import org\.hibernate\.annotations\.common\.AssertionFailure;" />
            <!-- The last sentence of the message is a keyword to trigger exclusion: see ExcludeTestPackages -->
            <property name="message" value="Stop using the AssertionFailure from commons-annotations." />
        </module>

        <!-- Nobody should be using StringBuffer anymore -->
        <module name="RegexpSinglelineJava">
            <property name="format" value=" StringBuffer" />
            <!-- The last sentence of the message is a keyword to trigger exclusion: see ExcludeTestPackages -->
            <property name="message" value="Nobody should be using StringBuffer anymore" />
        </module>

        <!-- Required to get SuppressionCommentFilter to work -->
        <module name="FileContentsHolder" />

    </module>

    <!-- We are not using NewLineAtEndOfFile because the new line chars change
        on different operating systems and that rule allows only one type. This rule
        is not actually checking for new lines, but it will work if we check that
        there are not white spaces at the end of a line with another rule. -->
    <module name="RegexpMultiline">
        <property name="format" value="\S\z" />
        <property name="message" value="Missing new line at the end of file" />
    </module>

    <module name="RegexpMultiline">
        <property name="format" value="\S\s\s\z" />
        <property name="message" value="Only one new line is allowed at the end of a file" />
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="\s+$" />
        <property name="message" value="White spaces at the end of line" />
    </module>

    <module name="SuppressionCommentFilter" />

</module>
